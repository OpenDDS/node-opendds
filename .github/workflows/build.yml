---
name: "node-opendds CI"
on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master
      - MigrateToGithubActions
  schedule:
    - cron: '10 0 * * 0'
jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        node_version:
          - 10
        #opendds_branch: [master, latest-release]
        opendds_branch: [branch-DDS-3.14]
        include:
          - {os: macos-latest, dds_security: 0}
          - {os: ubuntu-latest, dds_security: 1}
    runs-on: ${{matrix.os}}
    steps:
      - uses: actions/checkout@v2
      - name: 'Set environment variables'
        run: |-
          echo "ACE_ROOT=$GITHUB_WORKSPACE/ACE_TAO/ACE" >> $GITHUB_ENV
          echo "TAO_ROOT=$GITHUB_WORKSPACE/ACE_TAO/TAO" >> $GITHUB_ENV
          echo "DDS_ROOT=$GITHUB_WORKSPACE/OpenDDS" >> $GITHUB_ENV
          echo "MPC_ROOT=$GITHUB_WORKSPACE/MPC" >> $GITHUB_ENV
          echo "NAN_ROOT=$GITHUB_WORKSPACE/node_modules/nan" >> $GITHUB_ENV
          echo "npm_config_devdir=$GITHUB_WORKSPACE/opendds-node-gyp-devdir" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=$GITHUB_WORKSPACE/ACE_TAO/ACE/lib:$GITHUB_WORKSPACE/OpenDDS/lib:$GITHUB_WORKSPACE/tools/v8stubs:$LD_LIBRARY_PATH" >> $GITHUB_ENV
      - name: 'Install node'
        run: |-
          #curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash
          cd ~/
          git clone https://github.com/nvm-sh/nvm.git .nvm
          cd ~/.nvm
          git checkout v0.38.0
          . ./nvm.sh

          #export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
          [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
          echo "NVM_DIR=$NVM_DIR" >> $GITHUB_ENV #need?

          cd $GITHUB_WORKSPACE
          nvm install ${{matrix.node_version}}
          nvm use ${{matrix.node_version}}
          npm install --save nan
          echo "node:$(node -v)  npm:$(npm -v)"
          echo "V8_ROOT=${{env.npm_config_devdir}}/$(node -v | cut -c 2-)" >> $GITHUB_ENV
      - name: 'Clone OpenDDS'
        run: |-
          git clone --depth 1 git://github.com/DOCGroup/MPC.git
          git clone --depth 1 -b Latest_Micro git://github.com/DOCGroup/ACE_TAO.git
          git clone --depth 1 -b ${{matrix.opendds_branch}} git://github.com/objectcomputing/OpenDDS.git
          if [${{matrix.dds_security}}]; then
            echo 'Install ssl and xerces'
            sudo apt-get update
            sudo apt-get -y install libssl-dev libxerces-c-dev
          fi
      - name: 'Configure & Build OpenDDS'
        run: |-
          if [${{matrix.dds_security}}]; then
            CONFIG_OPTIONS+="--security";
            BUILD_TARGETS+="OpenDDS_Security";
          fi
          echo "dds_security=${{matrix.dds_security}}; CONFIG_OPTIONS=$CONFIG_OPTIONS; BUILD_TARGETS=$BUILD_TARGETS"
          cd OpenDDS
          ./configure --no-tests --std=c++11 $CONFIG_OPTIONS
          cd ..
          make -C OpenDDS -sj6 DCPSInfoRepo_Main OpenDDS_Rtps_Udp $BUILD_TARGETS
      - name: 'Install node-gyp'
        run: |-
          npm install -g node-gyp
          node-gyp configure build
      - name: 'Build'
        run: |-
          ${{env.ACE_ROOT}}/bin/mwc.pl -type gnuace -exclude ACE_TAO,OpenDDS
          make
      - name: 'Test'
        run: |-
          if [${{matrix.dds_security}}]; then TEST_OPTIONS+="--secure"; fi
          echo "dds_security=${{matrix.dds_security}} TEST_OPTIONS=$TEST_OPTIONS"
          cd test;
          ./run_test.pl cpp2node $TEST_OPTIONS
          ./run_test.pl node2cpp $TEST_OPTIONS
          ./run_test.pl node2node $TEST_OPTIONS
