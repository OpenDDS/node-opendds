---
name: "node-opendds CI"
on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master
  schedule:
    - cron: '10 0 * * 0'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        node_version:
          - 12
          - 14
          - 16
        opendds_branch:
          - master
          # - latest-release
        m:
          - {os: ubuntu-latest, dds_security: 1}
          - {os: ubuntu-latest, dds_security: 0}
          - {os: macos-latest, dds_security: 1}
          - {os: macos-latest, dds_security: 0}
          - {os: windows-2019, dds_security: 1}
          - {os: windows-2019, dds_security: 0}

    runs-on: ${{ matrix.m.os }}
    steps:
      - uses: actions/checkout@v3
      - name: 'Checkout MPC'
        uses: actions/checkout@v3
        with:
          repository: DOCGroup/MPC
          path: MPC
          fetch-depth: 1
      - name: 'Checkout ACE_TAO'
        uses: actions/checkout@v3
        with:
          repository: DOCGroup/ACE_TAO
          ref: ace6tao2
          path: ACE_TAO
          fetch-depth: 1
      - name: 'Checkout OpenDDS'
        uses: actions/checkout@v3
        with:
          repository: objectcomputing/OpenDDS
          ref: ${{ matrix.opendds_branch }}
          path: OpenDDS
          fetch-depth: 1
      - name: 'Install ssl and xerces (ubuntu)'
        if: ${{ matrix.m.dds_security == 1 && matrix.m.os == 'ubuntu-latest' }}
        run: |-
          sudo apt-get update
          sudo apt-get -y install libssl-dev libxerces-c-dev
      - name: 'Install xerces (macos)'
        if: ${{ matrix.m.dds_security == 1 && matrix.m.os == 'macos-latest' }}
        run: |
          brew install xerces-c
      - name: 'Install openssl and xerces (windows)'
        if: ${{ matrix.m.dds_security == 1 && matrix.m.os == 'windows-2019' }}
        uses: lukka/run-vcpkg@v7
        with:
          vcpkgGitCommitId: b86c0c35b88e2bf3557ff49dc831689c2f085090
          vcpkgArguments: --recurse openssl xerces-c
          vcpkgTriplet: x64-windows
      - name: 'Set Up MSVC Environment'
        if: ${{ matrix.m.os == 'windows-2019' }}
        uses: ilammy/msvc-dev-cmd@v1
      - name: 'Set Up Problem Matcher (windows)'
        if: ${{ matrix.m.os == 'windows-2019' }}
        uses: ammaraskar/msvc-problem-matcher@0.1
      - name: 'Set Up Problem Matcher (ubuntu / macos)'
        if: ${{ matrix.m.os == 'ubuntu-latest' || matrix.m.os == 'macos-latest' }}
        uses: ammaraskar/gcc-problem-matcher@0.1
      - name: 'Set Up node (windows)'
        if: ${{ matrix.m.os == 'windows-2019' }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node_version }}
      - name: 'Set environment variables (ubuntu / macos)'
        if: ${{ matrix.m.os == 'ubuntu-latest' || matrix.m.os == 'macos-latest' }}
        shell: bash
        run: |-
          echo "ACE_ROOT=$GITHUB_WORKSPACE/ACE_TAO/ACE" >> $GITHUB_ENV
          echo "TAO_ROOT=$GITHUB_WORKSPACE/ACE_TAO/TAO" >> $GITHUB_ENV
          echo "DDS_ROOT=$GITHUB_WORKSPACE/OpenDDS" >> $GITHUB_ENV
          echo "MPC_ROOT=$GITHUB_WORKSPACE/MPC" >> $GITHUB_ENV
          echo "NVM_DIR=$GITHUB_WORKSPACE/nvm" >> $GITHUB_ENV
          echo "NAN_ROOT=$GITHUB_WORKSPACE/node_modules/nan" >> $GITHUB_ENV
          echo "npm_config_devdir=$GITHUB_WORKSPACE/opendds-node-gyp-devdir" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$GITHUB_WORKSPACE/ACE_TAO/ACE/lib:$GITHUB_WORKSPACE/OpenDDS/lib:$GITHUB_WORKSPACE/tools/v8stubs" >> $GITHUB_ENV
          if [ ${{ matrix.m.dds_security }} == 1 ]; then
            CONFIG_OPTIONS+=" --security";
            BUILD_TARGETS+=" OpenDDS_Security";
            if [ '${{ matrix.m.os }}' == 'macos-latest' ]; then
              CONFIG_OPTIONS+=" --xerces3=/usr/local/Cellar/xerces-c/3.2.3 --openssl=/usr/local/opt/openssl@1.1"
            fi
          fi
          echo "CONFIG_OPTIONS=$CONFIG_OPTIONS" >> $GITHUB_ENV
          echo "BUILD_TARGETS=DCPSInfoRepo_Main OpenDDS_Rtps_Udp$BUILD_TARGETS" >> $GITHUB_ENV
      - name: 'Set environment variables (windows)'
        if: ${{ matrix.m.os == 'windows-2019' }}
        shell: bash
        run: |-
          echo "ACE_ROOT=$GITHUB_WORKSPACE\\ACE_TAO\\ACE" >> $GITHUB_ENV
          echo "TAO_ROOT=$GITHUB_WORKSPACE\\ACE_TAO\\TAO" >> $GITHUB_ENV
          echo "DDS_ROOT=$GITHUB_WORKSPACE\\OpenDDS" >> $GITHUB_ENV
          echo "MPC_ROOT=$GITHUB_WORKSPACE\\MPC" >> $GITHUB_ENV
          echo "NVM_DIR=$GITHUB_WORKSPACE\\nvm" >> $GITHUB_ENV
          echo "NAN_ROOT=$GITHUB_WORKSPACE\\node_modules\\nan" >> $GITHUB_ENV
          echo "npm_config_devdir=$GITHUB_WORKSPACE\\opendds-node-gyp-devdir" >> $GITHUB_ENV
          if [ ${{ matrix.m.dds_security }} == 1 ]; then
            CONFIG_OPTIONS+=" --security";
            BUILD_TARGETS+=";OpenDDS_Security";
            if [ '${{ matrix.m.os }}' == 'windows-2019' ]; then
              CONFIG_OPTIONS+=" --xerces3=$VCPKG_ROOT\\installed\\x64-windows --openssl=$VCPKG_ROOT\\installed\\x64-windows"
            fi
          fi
          echo "CONFIG_OPTIONS=$CONFIG_OPTIONS" >> $GITHUB_ENV
          echo "BUILD_TARGETS=DCPSInfoRepo_Main;OpenDDS_Rtps_Udp$BUILD_TARGETS" >> $GITHUB_ENV
      - name: 'Configure & Build OpenDDS (ubuntu / macos)'
        if: ${{ matrix.m.os == 'ubuntu-latest' || matrix.m.os == 'macos-latest' }}
        shell: bash
        run: |-
          echo "dds_security=${{ matrix.m.dds_security }}; CONFIG_OPTIONS=${{ env.CONFIG_OPTIONS }}; BUILD_TARGETS=${{ env.BUILD_TARGETS }}"
          cd OpenDDS
          ./configure --no-tests ${{ env.CONFIG_OPTIONS }}
          . setenv.sh
          make -j3 ${{ env.BUILD_TARGETS }}
      - name: 'Configure OpenDDS (windows)'
        if: ${{ matrix.m.os == 'windows-2019' }}
        shell: cmd
        run: |-
          echo "dds_security=${{ matrix.m.dds_security }}; CONFIG_OPTIONS=${{ env.CONFIG_OPTIONS }}; BUILD_TARGETS=${{ env.BUILD_TARGETS }}"
          cd OpenDDS
          configure --no-tests ${{ env.CONFIG_OPTIONS }}
      - name: 'Build OpenDDS (windows)'
        if: ${{ matrix.m.os == 'windows-2019' }}
        shell: cmd
        run: |-
          cd OpenDDS
          call setenv.cmd
          msbuild -p:Configuration=Debug,Platform=x64 -m DDS_TAOv2.sln
      - name: 'Checkout nvm'
        uses: actions/checkout@v3
        with:
          repository: nvm-sh/nvm.git
          path: ${{ env.NVM_DIR }}
          ref: v0.39.0
          fetch-depth: 1
      - name: 'Install node, Build, Test (ubuntu / macos)'
        if: ${{ matrix.m.os == 'ubuntu-latest' || matrix.m.os == 'macos-latest' }}
        shell: bash
        run: |-
          set -e
          cd ${{ env.NVM_DIR }}
          [ -s "./nvm.sh" ] && \. "./nvm.sh"  # loads nvm
          cd $GITHUB_WORKSPACE
          nvm install ${{ matrix.node_version }}
          nvm use ${{ matrix.node_version }}
          echo "node:$(node -v) npm:$(npm -v)"
          export V8_ROOT=$NVM_INC/../..
          echo "Build ========== ========== =========="
          npm install
          ${{ env.ACE_ROOT }}/bin/mwc.pl -type gnuace -exclude ACE_TAO,OpenDDS
          make -j2 || make
          echo "Test ========== ========== =========="
          cd test
          ./run_test.pl cpp2node
          ./run_test.pl node2cpp
          ./run_test.pl node2node
          ./run_test.pl cpp2node --rtps
          ./run_test.pl node2cpp --rtps
          ./run_test.pl node2node --rtps
          if [ ${{ matrix.m.dds_security }} == 1 ]; then
          ./run_test.pl cpp2node --rtps --secure;
          ./run_test.pl node2cpp --rtps --secure;
          ./run_test.pl node2node --rtps --secure;
          fi
      - name: 'Install (windows)'
        if: ${{ matrix.m.os == 'windows-2019' }}
        shell: cmd
        run: |-
          cd OpenDDS
          call setenv.cmd
          cd ..
          call npm.cmd config set msvs_version 2019
          call npm.cmd install --debug --lib_suffix=d
      - name: 'Find V8 (windows)'
        if: ${{ matrix.m.os == 'windows-2019' }}
        shell: cmd
        run: |-
          dir /s "v8.h" | findstr /c:"\include\node" > v8_path_string.txt
          echo "type v8_path_string.txt"
          type v8_path_string.txt
          (for /f "tokens=3,*" %%a in (v8_path_string.txt) do @echo %%a) > v8_path.txt
          echo "type v8_path.txt"
          type v8_path.txt
      - name: 'Build, Expecting Failure (windows)'
        if: ${{ matrix.m.os == 'windows-2019' }}
        continue-on-error: true
        shell: cmd
        run: |-
          cd OpenDDS
          call setenv.cmd
          cd ..
          set /p V8_ROOT=<v8_path.txt
          set V8_ROOT=%V8_ROOT%\..\..
          echo "V8_ROOT = %V8_ROOT%"
          set PATH=%PATH%;%GITHUB_WORKSPACE%\ACE_TAO\ACE\lib;%GITHUB_WORKSPACE%\OpenDDS\lib;%GITHUB_WORKSPACE%\tools\v8stubs"
          echo "PATH = %PATH%"
          perl ${{ env.ACE_ROOT }}\bin\mwc.pl -type vs2019 -exclude ACE_TAO,OpenDDS
          msbuild -p:Configuration=Debug,Platform=x64 -m node_opendds.sln
      - name: 'Upload Project Files Artifact (windows)'
        if: ${{ matrix.m.os == 'windows-2019' }} && false # not currently required (&& false), but keep for future windows debugging
        uses: actions/upload-artifact@v3
        with:
          name: node_${{ matrix.node_version }}_${{ matrix.opendds_branch }}_${{ matrix.m.dds_security }}_vs2019_project_files
          path: |
            build/**/*.sln
            build/**/*.vcxproj
            *.sln
            test/**/*.vcxproj
      - name: 'Build (windows)'
        if: ${{ matrix.m.os == 'windows-2019' }}
        shell: cmd
        run: |-
          cd OpenDDS
          call setenv.cmd
          cd ..
          set /p V8_ROOT=<v8_path.txt
          set V8_ROOT=%V8_ROOT%\..\..
          echo "V8_ROOT = %V8_ROOT%"
          set PATH=%PATH%;%GITHUB_WORKSPACE%\ACE_TAO\ACE\lib;%GITHUB_WORKSPACE%\OpenDDS\lib;%GITHUB_WORKSPACE%\tools\v8stubs"
          echo "PATH = %PATH%"
          msbuild -p:Configuration=Debug,Platform=x64 -m node_opendds.sln
      - name: 'Test (windows)'
        if: ${{ matrix.m.os == 'windows-2019' }}
        shell: cmd
        run: |-
          cd OpenDDS
          call setenv.cmd
          cd ..
          set /p V8_ROOT=<v8_path.txt
          set V8_ROOT=%V8_ROOT%\..\..
          echo "V8_ROOT = %V8_ROOT%"
          set PATH=%PATH%;%GITHUB_WORKSPACE%\ACE_TAO\ACE\lib;%GITHUB_WORKSPACE%\OpenDDS\lib;%GITHUB_WORKSPACE%\tools\v8stubs"
          echo "PATH = %PATH%"
          cd test
          perl run_test.pl cpp2node
          if %errorlevel% neq 0 exit /b %errorlevel%
          perl run_test.pl node2cpp
          if %errorlevel% neq 0 exit /b %errorlevel%
          perl run_test.pl node2node
          if %errorlevel% neq 0 exit /b %errorlevel%
          perl run_test.pl cpp2node --rtps
          if %errorlevel% neq 0 exit /b %errorlevel%
          perl run_test.pl node2cpp --rtps
          if %errorlevel% neq 0 exit /b %errorlevel%
          perl run_test.pl node2node --rtps
      - name: 'Test Secure (windows)'
        if: ${{ matrix.m.os == 'windows-2019' && matrix.m.dds_security == 1 }}
        shell: cmd
        run: |-
          cd OpenDDS
          call setenv.cmd
          cd ..
          set /p V8_ROOT=<v8_path.txt
          set V8_ROOT=%V8_ROOT%\..\..
          echo "V8_ROOT = %V8_ROOT%"
          set PATH=%PATH%;%GITHUB_WORKSPACE%\ACE_TAO\ACE\lib;%GITHUB_WORKSPACE%\OpenDDS\lib;%GITHUB_WORKSPACE%\tools\v8stubs"
          echo "PATH = %PATH%"
          cd test
          perl run_test.pl cpp2node --rtps --secure
          if %errorlevel% neq 0 exit /b %errorlevel%
          perl run_test.pl node2cpp --rtps --secure
          if %errorlevel% neq 0 exit /b %errorlevel%
          perl run_test.pl node2node --rtps --secure
