---
name: "node-opendds Build & Test"
on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master
      - MigrateToGithubActions
  schedule:
    - cron: '10 0 * * 0'
jobs:
  Build:
    strategy:
      fail-fast: false
      matrix:
        node-version:
          - 10
        include:
          - {os: macOS-latest, env: {COMPILER: "clang++ NO_INLINE=1", OPENDDS_BRANCH: master, DDS_SECURITY: 0}}
          - {os: macOS-latest, env: {COMPILER: "clang++ NO_INLINE=1", OPENDDS_BRANCH: latest-release, DDS_SECURITY: 0}}
          - {os: ubuntu-latest, env: {OPENDDS_BRANCH: master, DDS_SECURITY: 1}}
          - {os: ubuntu-latest, env: {OPENDDS_BRANCH: latest-release, DDS_SECURITY: 1}}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - name: 'Set up Node.js ${{ matrix.node-version }}'
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - run: |-
          npm install ${{ matrix.node-version }}
      - if: runner.os == 'Linux'
        name: 'Install ssl and xerces'
        run: |-
          sudo apt-get update
          sudo apt-get -y install libssl-dev libxerces-c-dev
      - name: 'Clone MPC, ACE_TAO and OpenDDS'
        run: |-
          git clone --depth 1 git://github.com/DOCGroup/MPC.git
          git clone --depth 1 -b Latest_Micro git://github.com/DOCGroup/ACE_TAO.git
          git clone --depth 1 -b ${{ matrix.env.OPENDDS_BRANCH }} git://github.com/objectcomputing/OpenDDS.git
      - name: 'Set environment variables'
        run: |-
          echo "ACE_ROOT=$GITHUB_WORKSPACE/ACE_TAO/ACE" >> $GITHUB_ENV
          echo "TAO_ROOT=$GITHUB_WORKSPACE/ACE_TAO/TAO" >> $GITHUB_ENV
          echo "DDS_ROOT=$GITHUB_WORKSPACE/OpenDDS" >> $GITHUB_ENV
          echo "MPC_ROOT=$GITHUB_WORKSPACE/MPC" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=$GITHUB_WORKSPACE/ACE_TAO/ACE/lib:$GITHUB_WORKSPACE/OpenDDS/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV
      - name: 'Configure OpenDDS'
        run: |-
          cd OpenDDS
          if [ "$DDS_SECURITY" == 1 ]; then CONFIG_OPTIONS+="--security"; fi
          ./configure --no-tests --std=c++11 $CONFIG_OPTIONS
          cd ..
      - name: 'Build OpenDDS'
        run: |-
          export npm_config_devdir=$GITHUB_WORKSPACE/opendds-node-gyp-devdir
          npm install -g node-gyp
          node-gyp install --ensure
          if [ "$DDS_SECURITY" == 1 ]; then BUILD_TARGETS+="OpenDDS_Security"; fi
          make -C OpenDDS -sj6 DCPSInfoRepo_Main OpenDDS_Rtps_Udp $BUILD_TARGETS
          npm install
          export V8_ROOT=$npm_config_devdir/$(node -v | cut -c 2-)
          export NAN_ROOT="$GITHUB_WORKSPACE/node_modules/nan"
          ${{ env.ACE_ROOT }}/bin/mwc.pl -type gnuace -exclude ACE_TAO,OpenDDS
          export LD_LIBRARY_PATH="${{ env.LD_LIBRARY_PATH }}:$GITHUB_WORKSPACE/tools/v8stubs"
          make
      - name: 'Run tests'
        run: |-
          if [ "$DDS_SECURITY" == 1 ]; then TEST_OPTIONS+="--secure"; fi
          cd test;
          ./run_test.pl cpp2node $TEST_OPTIONS
          ./run_test.pl node2cpp $TEST_OPTIONS
          ./run_test.pl node2node $TEST_OPTIONS
